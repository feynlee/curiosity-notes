<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>curiosity-notes</title>
<link>https://feynlee.github.io/curiosity-notes/TIL.html</link>
<atom:link href="https://feynlee.github.io/curiosity-notes/TIL.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Sun, 02 Apr 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Subtle Bug: Variable Shadows Function</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2023/2023-04-02-variable_shadows_function.html</link>
  <description><![CDATA[ 



<p>Here’s an example:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func(): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func2(): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test(x):</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-7">        func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func2</span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func</span>
<span id="cb1-9"></span>
<span id="cb1-10"></span>
<span id="cb1-11">test(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>UnboundLocalError: cannot access local variable 'func' where it is not associated with a value</code></pre>
</div>
</div>
<p>In the function <code>test</code>, <code>func</code> is a new variable that gets assigned <code>func2</code> if <code>x</code> is positive. It shadows the function <code>func</code> defined outside of the <code>test</code> function. So when <code>x=0</code>, the <code>func</code> is treated as a variable which is not defined, and the function <code>func</code> is not called.</p>
<p><code>func</code> does not fall back to the function <code>func</code> defined outside of the <code>test</code> function.</p>
<p>This is a subtle bug that can be hard to find.</p>
<p>We need to remember that if the same name is used for a variable inside the function, we have to continue to treat it as a variable in the function, even if it’s inside a branched <code>if</code> statement.</p>
<p>To fix this, we can either directly return the function <code>func</code> or <code>func2</code> in the <code>test</code> function, or we can use a different name for the variable.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func(): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func2(): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test(x):</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func2</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func</span>
<span id="cb3-10"></span>
<span id="cb3-11"></span>
<span id="cb3-12">test(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>&lt;function __main__.func()&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func(): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func2(): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test(x):</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-8">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  func2</span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-10">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func</span>
<span id="cb5-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> f</span>
<span id="cb5-12"></span>
<span id="cb5-13"></span>
<span id="cb5-14">test(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;function __main__.func()&gt;</code></pre>
</div>
</div>
<p></p><div id="tweet-65863"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1642520651926761474","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EA subtle\uD83D\uDC1E: the function &#39;test&#39; has a variable &#39;func&#39; that shadows the function &#39;func&#39; defined outside &#39;test&#39;.\u003Cbr\u003E\u003Cbr\u003EEven though it&#39;s in one branch of the if statement, the &#39;func&#39; is now treated as a variable in &#39;test&#39; and does not fall back to the function &#39;func&#39;. \u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Python\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/RXPAzHFPhV\"\u003Epic.twitter.com\/RXPAzHFPhV\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1642520651926761474?ref_src=twsrc%5Etfw\"\u003EApril 2, 2023\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-65863").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2023/2023-04-02-variable_shadows_function.html</guid>
  <pubDate>Sun, 02 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/FstnXFoXgAAT4ek?format=jpg&amp;name=medium" medium="image"/>
</item>
<item>
  <title>Get Function from Modules Using Its Name</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2023/2023-01-13-get_function_with_its_name.html</link>
  <description><![CDATA[ 



<p>Sometimes we need to obtain a function defined in a certain module using its name. If the function you are calling is defined in the same module, we can use <code>globals()</code> or <code>locals()</code>:</p>
<ul>
<li><p><code>globals()</code> returns a dictionary with the global symbol table:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"func_name"</span>]</span></code></pre></div></li>
<li><p><code>locals()</code> returns a dictionary with the current local symbol table:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span>()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"func_name"</span>]</span></code></pre></div></li>
</ul>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> demo_func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_locals(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Test whether we can get the local functions using locals()"</span></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> local_demo_func(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb3-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span>()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'local_demo_func'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> local_demo_func</span>
<span id="cb3-11"></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `globals()` returns a dictionary with the global symbol table:</span></span>
<span id="cb3-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_func'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> demo_func</span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `locals()` returns a dictionary with the current local symbol table</span></span>
<span id="cb3-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> test_locals()</span></code></pre></div>
</div>
<p>If it’s defined another module, we can simply do</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> foo</span>
<span id="cb4-2"></span>
<span id="cb4-3">func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(foo, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_func'</span>)</span></code></pre></div>
<p>For example:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'today'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> date.today</span></code></pre></div>
</div>
<p></p><div id="tweet-33822"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1616176774919897095","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E\u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E Sometimes we need to get a function by its name string. When we are in the current module where this function is defined, we can use `globals()` or `locals()`. When it&#39;s from an imported module, we can use `getattr`. \u003Ca href=\"https:\/\/twitter.com\/hashtag\/python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#python\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/zqdi3hvFPF\"\u003Epic.twitter.com\/zqdi3hvFPF\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1616176774919897095?ref_src=twsrc%5Etfw\"\u003EJanuary 19, 2023\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-33822").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2023/2023-01-13-get_function_with_its_name.html</guid>
  <pubDate>Thu, 19 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/Fm3PmEyWQBoc-2a?format=jpg&amp;name=large" medium="image"/>
</item>
<item>
  <title>$() Command Substitution in Bash vs in Zsh</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2023/2023-01-03-()_in_bash_vs_in_zsh.html</link>
  <description><![CDATA[ 



<p>A simple learning today: when using <code>$()</code> in Bash, it concatenates the outputs into one single line, while in Zsh, it does not seem to do so.</p>
<p>In bash</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">files</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$files</span></span></code></pre></div>
<p>outputs something like</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file1.md</span> file2.md file3.md</span></code></pre></div>
<p>But when the same commands are executed in Zsh, I got</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file1.md</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file2.md</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file3.md</span></span></code></pre></div>
<p>with the line breaks preserved.</p>
<p></p><div id="tweet-90493"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1610438401597050881","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E\u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E A simple discovery today: when $() is used in Bash, the outputs are concatenated in a single line, but in Zsh, the line breaks are preserved. \u003Cbr\u003E\u003Cbr\u003EIs there a way to preserve the linebreaks in Bash when using $()?\uD83E\uDD14\u003Ca href=\"https:\/\/twitter.com\/hashtag\/unix?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#unix\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/hashtag\/shellcommands?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#shellcommands\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/AyNNpngYCC\"\u003Epic.twitter.com\/AyNNpngYCC\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1610438401597050881?ref_src=twsrc%5Etfw\"\u003EJanuary 4, 2023\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-90493").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Command Line</category>
  <category>Zsh</category>
  <category>Bash</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2023/2023-01-03-()_in_bash_vs_in_zsh.html</guid>
  <pubDate>Tue, 03 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/FllsMwSXwAEcY74?format=jpg&amp;name=medium" medium="image"/>
</item>
<item>
  <title>Append and Prepend Characters in Python f-Strings</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-28-f_string_in_python.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Demo"</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:*&lt;10}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:*&gt;10}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:*^10}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Demo******
******Demo
***Demo***</code></pre>
</div>
</div>
<p></p><div id="tweet-39978"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1608194971848384516","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E\u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E one quick and small trick to make up a string of length N with the text left justified (&#39;&lt;&#39;), right justified (&#39;&gt;&#39;), or centered (&#39;^&#39;), and fill the rest with an arbitrary character using f-String \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Python\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/JU61RxRmGD\"\u003Epic.twitter.com\/JU61RxRmGD\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1608194971848384516?ref_src=twsrc%5Etfw\"\u003EDecember 28, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-39978").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-28-f_string_in_python.html</guid>
  <pubDate>Wed, 28 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/FlFwqN9XwAEcPj8?format=png&amp;name=small" medium="image"/>
</item>
<item>
  <title>Fixing the “Unable to Resolve Your Shell Environment” Problem in VSCode</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-15-Fixing_the_Unable_to_Resolve_Your_Shell_Environment_Problem_in_VSCode.html</link>
  <description><![CDATA[ 



<p>You’ve probably come across this notification in VSCode:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://feynlee.github.io/curiosity-notes/TIL/2022/https:/code.visualstudio.com/assets/docs/supporting/faq/shell-env-error.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>It means that the shell environment defined in your <code>.bashrc</code> or <code>.zshrc</code> files is not resolved in a short amount of time. See detailed explanation <a href="https://code.visualstudio.com/docs/supporting/faq#_resolving-shell-environment-fails">here</a>.</p>
<p>Unfortunately, VSCode does not have an option to customize or disable that time limit. So to make it work, we need to remove some lines that are taking long from our <code>.zshrc</code> for VSCode.</p>
<p>Here’s a simple example of not sourcing <code>oh-my-zsh.sh</code> when using VSCode:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource zsh number-lines code-with-copy"><code class="sourceCode zsh"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In .zshrc</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${TERM_PROGRAM}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vscode"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb1-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">plugins</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">(</span>git zsh-autosuggestions zsh-syntax-highlighting<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ZSH</span>/oh-my-zsh.sh</span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<p>If you need to add this <code>if</code> statement at multiple places, you may want to simply create a separate <code>.zshrc-vscode</code> file and source that when using VSCode:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource zsh number-lines code-with-copy"><code class="sourceCode zsh"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In .zshrc</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${TERM_PROGRAM}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vscode"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> ~/.zshrc-vscode</span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb2-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> ~/.zshrc-g</span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<p></p><div id="tweet-12986"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1603912405230227457","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EWow, \u003Ca href=\"https:\/\/twitter.com\/hashtag\/chatGPT?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#chatGPT\u003C\/a\u003E now shows all the past conversations! \u003Cbr\u003E\u003Cbr\u003EAccording to the Dec15 release notes, it&#39;s now less likely to refuse to answer questions, and there will be an experimental daily message cap. \u003Cbr\u003E\u003Cbr\u003EYou will be given the option to extend access by providing feedback to ChatGPT. \u003Ca href=\"https:\/\/t.co\/pOzGf9skCx\"\u003Epic.twitter.com\/pOzGf9skCx\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1603912405230227457?ref_src=twsrc%5Etfw\"\u003EDecember 17, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-12986").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>VSCode</category>
  <category>IDE</category>
  <category>Zsh</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-15-Fixing_the_Unable_to_Resolve_Your_Shell_Environment_Problem_in_VSCode.html</guid>
  <pubDate>Thu, 15 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://code.visualstudio.com/assets/docs/supporting/faq/shell-env-error.png" medium="image" type="image/png"/>
</item>
<item>
  <title>How to Get a List of Directories with Updated Files Since the Last Git Merge</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-12-get_list_of_folders_of_updated_files_since_last_merge.html</link>
  <description><![CDATA[ 



<p>It’s as simple as the following:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">folders</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> diff <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name-only</span> HEAD@{1}..HEAD <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">awk</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-F</span>/ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{print $1}'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uniq</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p><code>git diff</code> gets all files that have changed, <code>awk -F/</code> parses out the directory name before the first <code>/</code>, and finally <code>uniq</code> returns a list of unique directory names.</p>
<p></p><div id="tweet-10513"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1602461196719984640","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E\u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E how to get a list of directory names where files have changed since the last git merge. Thanks to \u003Ca href=\"https:\/\/twitter.com\/hashtag\/chatGPT?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#chatGPT\u003C\/a\u003E for making the research process so much easier! \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Linux?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Linux\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/bgYTZTilSW\"\u003Epic.twitter.com\/bgYTZTilSW\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1602461196719984640?ref_src=twsrc%5Etfw\"\u003EDecember 13, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-10513").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Git</category>
  <category>Linux</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-12-get_list_of_folders_of_updated_files_since_last_merge.html</guid>
  <pubDate>Mon, 12 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/Fj0VIdtWYAA8zQ8?format=jpg&amp;name=large" medium="image"/>
</item>
<item>
  <title>Replace Certain Lines in a Script Using Fileinput</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-06-replace_certain_lines_in_file.html</link>
  <description><![CDATA[ 



<p>If we are using a script written by someone else, and we want to modify certain lines of it before execution, we can use Python’s <code>fileinput</code> module:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fileinput</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> fileinput.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.py'</span>, </span>
<span id="cb1-5">                     backup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.bak'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the file is moved to a backup file  </span></span>
<span id="cb1-6">                     inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and standard output is directed to the input file</span></span>
<span id="cb1-7">                     ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> f:</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.strip().startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'print'</span>):</span>
<span id="cb1-10">            line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'print("This is a new message")'</span>            </span>
<span id="cb1-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lines that are written to stdout will be written to the file</span></span>
<span id="cb1-12">        sys.stdout.write(line)</span></code></pre></div>
<p>When <code>inplace=True</code>, as in the above code, whatever’s written to stdout, will be written to the file. You can also specify a backup file, as we did in the example.</p>
<p></p><div id="tweet-77301"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1600291995913625602","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E\u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E a trick from \u003Ca href=\"https:\/\/twitter.com\/GoogleColab?ref_src=twsrc%5Etfw\"\u003E@GoogleColab\u003C\/a\u003E Notebooks for \u003Ca href=\"https:\/\/twitter.com\/hashtag\/stablediffusion?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#stablediffusion\u003C\/a\u003E: if we need to modify a few lines in someone else&#39;s script before execution, we can use \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Python\u003C\/a\u003E&#39;s fileinput module to overwrite the file in place.\u003Cbr\u003E\u003Cbr\u003EA simple example is shown in the picture. \u003Ca href=\"https:\/\/t.co\/IKfI4MhHgF\"\u003Epic.twitter.com\/IKfI4MhHgF\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1600291995913625602?ref_src=twsrc%5Etfw\"\u003EDecember 7, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-77301").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-06-replace_certain_lines_in_file.html</guid>
  <pubDate>Tue, 06 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/FjVgHFGXoAIDO6H?format=jpg&amp;name=large" medium="image"/>
</item>
<item>
  <title>How to Set Function as Methods</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-04-set_function_as_methods.html</link>
  <description><![CDATA[ 



<p>TIL: In python, functions act as <a href="https://docs.python.org/3/howto/descriptor.html#functions-and-methods">descriptors</a>. When they are called from an instance, they get turned into “bound method”, which automatically inserts the instance into the function as its first argument: <code>obj.f(*args)</code> call is transformed into <code>f(obj, *args)</code>. If they are called from a class, we get the function itself, and we need to provide all the arguments ourselves: Calling <code>cls.f(*args)</code> becomes <code>f(*args)</code>.</p>
<p>In the following example, <code>A.func()</code> raises error because it expects one argument, while <code>A().func()</code> runs without a problem because <code>A()</code> is automatically inserted into the <code>func</code>.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> A:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">A.func()</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: func() missing 1 required positional argument: 'self'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">A().func()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>1</code></pre>
</div>
</div>
<p>Because this behavior is associated with functions (those defined with <code>def</code>) themselves, we don’t need to do anything different if we want to turn a function into a method. However we write them in the class definition, we can do the same thing here.</p>
<p>Additionally, we can use <code>MethodType</code> to return a method that automatically inserts the object’s class as the first argument, equivalent to using the <code>classmethod</code> decorator.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MethodType</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> A:</span>
<span id="cb5-4">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> func(cls):</span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cls.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ins_func(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a function as method</span></span>
<span id="cb5-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">setattr</span>(A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'func'</span>, ins_func)</span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a function as classmethod</span></span>
<span id="cb5-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">setattr</span>(A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_func1'</span>, MethodType(func, A))</span>
<span id="cb5-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">setattr</span>(A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_func2'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">classmethod</span>(func))</span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a function as property</span></span>
<span id="cb5-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">setattr</span>(A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'property_func'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">property</span>(ins_func))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">A.class_func1()</span>
<span id="cb6-2">A.class_func2()</span>
<span id="cb6-3">A().class_func1()</span>
<span id="cb6-4">A().class_func2()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>11</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>11</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>11</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>11</code></pre>
</div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A()</span>
<span id="cb11-2">a.func</span>
<span id="cb11-3">a.func()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>&lt;bound method ins_func of &lt;__main__.A object at 0x7f9f40b79b50&gt;&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>101</code></pre>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">a.property_func</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>101</code></pre>
</div>
</div>
<p></p><div id="tweet-74134"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1599553598110605312","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E\u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E In \u003Ca href=\"https:\/\/twitter.com\/hashtag\/python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#python\u003C\/a\u003E, functions have a __get__() method so that they are transformed when accessed from an instance. While if it&#39;s called from a class, it&#39;s just the function itself: \u003Ca href=\"https:\/\/t.co\/S90CAXtJG6\"\u003Ehttps:\/\/t.co\/S90CAXtJG6\u003C\/a\u003E\u003Cbr\u003E\u003Cbr\u003E- obj.f(*args) -&gt; f(obj, *args)\u003Cbr\u003E- cls.f(*args) -&gt; f(*args)\u003Ca href=\"https:\/\/twitter.com\/hashtag\/descriptor?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#descriptor\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/7Fka8cxKdi\"\u003Epic.twitter.com\/7Fka8cxKdi\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1599553598110605312?ref_src=twsrc%5Etfw\"\u003EDecember 4, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-74134").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-12-04-set_function_as_methods.html</guid>
  <pubDate>Sun, 04 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/FjLA82uWAAQuJpu?format=jpg&amp;name=large" medium="image"/>
</item>
<item>
  <title>Access Data in Installed Python Package</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-30-access_data_in_python_libraries.html</link>
  <description><![CDATA[ 



<p>For a python package structured as the following:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource yml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">setup.py</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">src/</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  mypkg/</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    __init__.py</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      module.py</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      data/</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        tables.csv</span></span></code></pre></div>
<p>we can include the data in the package by</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">setup(...,</span>
<span id="cb2-2">      packages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mypkg'</span>],</span>
<span id="cb2-3">      package_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mypkg'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'src/mypkg'</span>},</span>
<span id="cb2-4">      package_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mypkg'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/*'</span>]},</span>
<span id="cb2-5">     )</span></code></pre></div>
<p>in <code>setup.py</code>.</p>
<p>If we need to access the data files in other parts of this package, we can do</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pkg_resources</span>
<span id="cb3-2"></span>
<span id="cb3-3">DATA_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkg_resources.resource_filename(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mypkg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/'</span>)</span>
<span id="cb3-4">TABLE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pkg_resources.resource_filename(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mypkg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/tables.csv'</span>)</span></code></pre></div>
<p>This makes sure to get the path to the data included in the package after installation.</p>
<p></p><div id="tweet-44958"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1598087158417752064","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EA simple learning today: to get the path to data included in a python package after installation, so they can be used in other parts of the package, we can use pkg_resources \u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/06gZOLCj04\"\u003Epic.twitter.com\/06gZOLCj04\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1598087158417752064?ref_src=twsrc%5Etfw\"\u003ENovember 30, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-44958").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-30-access_data_in_python_libraries.html</guid>
  <pubDate>Wed, 30 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/Fg7CS9wX0AA46sf?format=png&amp;name=900x900" medium="image"/>
</item>
<item>
  <title>Access Internet from Private Subnet in VPC</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-23-aws-private_subnet_setup.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://feynlee.github.io/curiosity-notes/TIL/2022/images/VPC-access_internet_from_private_subnet.png" class="img-fluid figure-img"></p>
</figure>
</div>
<p>I’m finally forced to learn the network configuration stuff in AWS VPC. The thing that was confusing me was the NAT Gateway.</p>
<p>For a private subnet to access the internet, we route traffic from the private subnet through a NAT Gateway which keeps out all traffic initiated from the internet. This gateway needs to be in a public subnet, so that it can access the internet through the Internet Gateway.</p>
<p>To route the traffic in this way, we need to make sure there’s an entry in the route table for the public subnet to connect to the Internet Gateway, and there’s an entry in the route table for the private subnet to connect to the NAT Gateway.</p>
<ul>
<li><p><strong>Step 1</strong>: <a href="https://docs.aws.amazon.com/vpc/latest/userguide/working-with-vpcs.html#create-vpc-and-other-resources">Create VPC, Public and Private Subnets</a></p>
<p>Create public and private subnets for each availability zone. Make sure that the subnets don’t overlap. For an explanation of subnets and CIDR notations:</p>
<p></p><div id="youtube-frame" style="position: relative; padding-bottom: 56.25%; /* 16:9 */ height: 0;"><iframe width="100%" height="" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/s_Ntt6eTn94" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><p></p></li>
<li><p><strong>Step 2</strong>: Create <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html#Add_IGW_Attach_Gateway">Internet Gateway</a> and <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating">NAT Gateway</a></p>
<p>Make sure to create the NAT Gateway for each availability zone, and make sure they are created in the <strong>public</strong> subnets, select “public” connectivity type, and allocate an elastic IP Address.</p></li>
<li><p><strong>Step 3</strong>: Create <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a></p>
<p>For each public subnet, create a route table, add an entry to connect to the internet gateway, and associate it to that subnet.</p>
<p>For each private subnet, create a route table, add an entry to connect to the NAT Gateway in the same availability zone, and associate it to that private subnet.</p></li>
<li><p><strong>Step 4</strong>: Add access to AWS resources</p>
<p>If we want the subnets to have access to AWS services such as S3, we can <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-s3.html#create-gateway-endpoint-s3">create an endpoint for AWS services</a>, and associate that endpoint to the route tables we created above.</p></li>
<li><p><strong>Step 5</strong>: Make Sure <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACL</a> and <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html">Security Groups</a> Don’t Block the Internet Traffic</p>
<p>When selecting security groups to use for services launched in the private subnet, make sure it allows traffic from and to the NAT Gateway.</p>
<p><strong>I was tripped up by this when setting up network connections for EMR Serverless.</strong></p></li>
</ul>
<p></p><div id="tweet-35047"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1595508141554339882","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003ETo access the internet through a private subnet in \u003Ca href=\"https:\/\/twitter.com\/hashtag\/AWS?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#AWS\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/hashtag\/VPC?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#VPC\u003C\/a\u003E, we need to connect through a NAT Gateway in the public subnet, so that it keeps out all traffic initiated from the internet.\u003Cbr\u003E\u003Cbr\u003EMake sure Network ACL and security groups do not block traffic from the NAT Gateway. \u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/QONJZWup2i\"\u003Epic.twitter.com\/QONJZWup2i\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1595508141554339882?ref_src=twsrc%5Etfw\"\u003ENovember 23, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-35047").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>AWS</category>
  <category>Network</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-23-aws-private_subnet_setup.html</guid>
  <pubDate>Wed, 23 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://feynlee.github.io/curiosity-notes/TIL/2022/images/VPC-access_internet_from_private_subnet.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Infinite Recursion When Using store_attr and Overwriting __getattr__</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-16-fastai-store_attr_infinite_recursion.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.basics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> store_attr</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Table:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-5">        store_attr()</span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getattr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, __name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb1-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>__name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"></span>
<span id="cb1-11">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tbl'</span>)</span>
<span id="cb1-12">t.column</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>RecursionError: maximum recursion depth exceeded while calling a Python object</code></pre>
</div>
</div>
<p>If we take a look at <code>store_attr</code>, we see that the problem occurs at the step where <code>store_attr()</code> calls <code>hasattr(self, '__slots__')</code>, which calls <code>__getattr__</code> when <code>__slots__</code> is not available. In fact, <code>store_attr</code> calls a few attributes that start with <code>__</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> store_attr(names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, but<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, cast<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, store_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>attrs):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Store params named in comma-separated `names` from calling context into attrs in `self`"</span></span>
<span id="cb3-3">    fr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sys._getframe(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-4">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argnames(fr, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>: args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'self'</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args)</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fr.f_locals[args[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> store_args <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: store_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__slots__'</span>)</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> store_args <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__stored_args__'</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__stored_args__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-9">    anno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotations(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cast <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {}</span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> names <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(names,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', *'</span>, names)</span>
<span id="cb3-11">    ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> names <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> names <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__slots__'</span>, args[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb3-12">    added <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {n:fr.f_locals[n] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ns}</span>
<span id="cb3-13">    attrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>attrs, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>added}</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(but,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): but <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', *'</span>, but)</span>
<span id="cb3-15">    attrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:v <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> attrs.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> but}</span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _store_attr(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, anno, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>attrs)</span></code></pre></div>
</div>
<p>Therefore, if we want to use <code>store_attr()</code>, when overwriting <code>__getattr__</code>, we need to protect those called by <code>store_attr()</code>, otherwise there will be an infinite loop.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.basics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> store_attr</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Table:</span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-5">        store_attr()</span>
<span id="cb4-6"></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getattr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, __name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> __name.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__'</span>):</span>
<span id="cb4-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getattr__</span>(__name)</span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>__name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tbl'</span>)</span>
<span id="cb4-15">t.column</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>'tbl.column'</code></pre>
</div>
</div>
<p></p><div id="tweet-73176"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1593048086527762432","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E\u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E if you use \u003Ca href=\"https:\/\/twitter.com\/fastdotai?ref_src=twsrc%5Etfw\"\u003E@fastdotai\u003C\/a\u003E&#39;s store_attr() to assign arguments to instance, and also overwrite __getattr__, an infinite recursion may occur, because store_attr calls a few attributes that start with &#39;__&#39; that may not exist. Details in the attached pictures. \u003Ca href=\"https:\/\/twitter.com\/hashtag\/python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#python\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/hashtag\/fastcore?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#fastcore\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/eA0VWzrIQS\"\u003Epic.twitter.com\/eA0VWzrIQS\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1593048086527762432?ref_src=twsrc%5Etfw\"\u003ENovember 17, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-73176").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <category>Fastai</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-16-fastai-store_attr_infinite_recursion.html</guid>
  <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/FhukZwzWQAI0hjM?format=jpg&amp;name=4096x4096" medium="image"/>
</item>
<item>
  <title>Show the Training Loop and CallBacks</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-15-fastai-show_training_loop.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.test_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> synth_learner</span>
<span id="cb1-2"></span>
<span id="cb1-3">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> synth_learner()</span>
<span id="cb1-4">learn.show_training_loop()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Start Fit
   - before_fit     : [TrainEvalCallback, Recorder, ProgressCallback]
  Start Epoch Loop
     - before_epoch   : [Recorder, ProgressCallback]
    Start Train
       - before_train   : [TrainEvalCallback, Recorder, ProgressCallback]
      Start Batch Loop
         - before_batch   : [CastToTensor]
         - after_pred     : []
         - after_loss     : []
         - before_backward: []
         - before_step    : []
         - after_step     : []
         - after_cancel_batch: []
         - after_batch    : [TrainEvalCallback, Recorder, ProgressCallback]
      End Batch Loop
    End Train
     - after_cancel_train: [Recorder]
     - after_train    : [Recorder, ProgressCallback]
    Start Valid
       - before_validate: [TrainEvalCallback, Recorder, ProgressCallback]
      Start Batch Loop
         - **CBs same as train batch**: []
      End Batch Loop
    End Valid
     - after_cancel_validate: [Recorder]
     - after_validate : [Recorder, ProgressCallback]
  End Epoch Loop
   - after_cancel_epoch: []
   - after_epoch    : [Recorder]
End Fit
 - after_cancel_fit: []
 - after_fit      : [ProgressCallback]</code></pre>
</div>
</div>
<p></p><div id="tweet-14507"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1592620644700917760","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EI finally come to a point where I need to implement my own custom Callbacks for \u003Ca href=\"https:\/\/twitter.com\/fastdotai?ref_src=twsrc%5Etfw\"\u003E@fastdotai\u003C\/a\u003E&#39;s training loop. And in doing so, I find this `show_training_loop` method extremely helpful in visualizing where different callbacks are called and in which order. \u003Ca href=\"https:\/\/twitter.com\/hashtag\/TIL?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#TIL\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Python\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/Zucak8ynKy\"\u003Epic.twitter.com\/Zucak8ynKy\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1592620644700917760?ref_src=twsrc%5Etfw\"\u003ENovember 15, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-14507").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Data Science</category>
  <category>Python</category>
  <category>AI</category>
  <category>Fastai</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-15-fastai-show_training_loop.html</guid>
  <pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/Fhoc8UsXEAckubU?format=png&amp;name=900x900" medium="image"/>
</item>
<item>
  <title>Pip Install from a Private Repo</title>
  <dc:creator>Ziyue Li</dc:creator>
  <link>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-06-pip_install_from_private_repo.html</link>
  <description><![CDATA[ 



<p>You can pip install in the following way:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>package_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>@git+ssh://git@github.com/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>repo_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>@<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>branch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>In <code>setup.py</code>, we can add these packages in the following way:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">setup(</span>
<span id="cb2-2">  name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;package&gt;'</span>,</span>
<span id="cb2-3">  install_requires<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;package_name&gt;@git+ssh://git@github.com/&lt;user&gt;/&lt;repo_name&gt;@&lt;branch&gt;'</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;package_name&gt;@git+https://&lt;access_token&gt;@github.com/&lt;user&gt;/&lt;repo_name&gt;@&lt;branch&gt;'</span></span>
<span id="cb2-6">  ]</span>
<span id="cb2-7">)</span></code></pre></div>
<p>If we are doing editable installation, it looks like the following:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> https://<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>access_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>@github.com/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>repo_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>#egg=<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>package_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>For GitLab CI/CD, one needs to do it in the following way:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> https://gitlab-ci-token:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${CI_JOB_TOKEN}</span>@gitlab.example.com/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>project<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>#egg=<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>package_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p></p><div id="tweet-50337"></div><script>tweet={"url":"https:\/\/twitter.com\/curiosity_notes\/status\/1589422638153494528","author_name":"Ziyue Li","author_url":"https:\/\/twitter.com\/curiosity_notes","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EOne can include a python package from git repo directly as a dependency, by listing it as &quot;&lt;package name&gt;\u003Ca href=\"https:\/\/twitter.com\/git?ref_src=twsrc%5Etfw\"\u003E@git\u003C\/a\u003E+&lt;git url&gt;&quot;. \u003Cbr\u003E\u003Cbr\u003EFor some reason, I always forget about the &quot;&lt;package name&gt;@&quot; part \uD83D\uDE05, so this tweet serves as a reminder for myself. \u003Ca href=\"https:\/\/twitter.com\/hashtag\/python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#python\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/hashtag\/nbdev?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#nbdev\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/IX1AcGGTkO\"\u003Epic.twitter.com\/IX1AcGGTkO\u003C\/a\u003E\u003C\/p\u003E&mdash; Ziyue Li (@curiosity_notes) \u003Ca href=\"https:\/\/twitter.com\/curiosity_notes\/status\/1589422638153494528?ref_src=twsrc%5Etfw\"\u003ENovember 7, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-50337").innerHTML = tweet["html"];</script><p></p>


<div class="sharethis-inline-share-buttons pt-5">

</div>

 ]]></description>
  <category>Python</category>
  <guid>https://feynlee.github.io/curiosity-notes/TIL/2022/2022-11-06-pip_install_from_private_repo.html</guid>
  <pubDate>Sun, 06 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/Fi2LMo8XkAIGGRv?format=jpg&amp;name=large" medium="image"/>
</item>
</channel>
</rss>
